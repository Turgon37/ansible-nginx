---

- name: Get installed version of Nginx
  command: /usr/bin/env nginx -v
  when: ansible_local.nginx is not defined
  changed_when: false
  check_mode: false
  register: _nginx__version_raw

- name: Create _nginx__version variable
  set_fact:
    _nginx__version:
      "{{ _nginx__version_raw.stderr.split('/')[1]|trim
      if _nginx__version_raw is not skipped
      else ansible_local.nginx.version_full }}"

- name: Create _nginx__branch variable
  set_fact:
    _nginx__branch:
      "{{ (_nginx__version|int is even)|ternary('stable', 'mainline')
      if _nginx__version_raw is not skipped
      else ansible_local.nginx.branch }}"

- name: "Ensure service group '{{ nginx__service_group }}' is present"
  group:
    name: '{{ nginx__service_group }}'
    system: true
    state: present
  notify: ['restart-nginx']

- name: "Ensure service user '{{ nginx__service_user }}' is present"
  user:
    name: '{{ nginx__service_user }}'
    group: '{{ nginx__service_group }}'
    shell: /sbin/nologin
    home: /nonexistent
    createhome: false
    system: true
    state: present
  notify: ['restart-nginx']

- name: Ensure configuration directories exists
  file:
    path: '{{ item }}'
    owner: root
    group: '{{ nginx__service_group }}'
    mode: 0750
    state: directory
  with_items:
    - '{{ nginx__config_directory }}'
    - '{{ nginx__available_sites_include_directory }}'
    - '{{ nginx__enabled_sites_include_directory }}'
    - '{{ nginx__ssl_directory }}'

- name: Generate ssl session ticket key if needed
  command: openssl rand -out {{ nginx__ssl_session_ticket_key }} 80
  args:
    creates: '{{ nginx__ssl_session_ticket_key }}'
  when: nginx__ssl_session_ticket_key is defined
  register: _nginx__session_ticket_key

- name: Ensure restricted permissions on session ticket key
  file:
    path: '{{ nginx__ssl_session_ticket_key }}'
    owner: root
    group: '{{ nginx__service_group }}'
    mode: 0640
  when: _nginx__session_ticket_key is not skipped

- name: Include virtuals hosts subtasks
  import_tasks: configure-sites.yml

- name: Setup mime types mapping file
  template:
    src: mime.types.conf.j2
    dest: '{{ nginx__mime_types_file }}'
    owner: root
    group: '{{ nginx__service_group }}'
    mode: 0640
  notify: ['reload-nginx']

- name: Setup main configuration file
  template:
    src: nginx.conf.j2
    dest: '{{ nginx__config_file }}'
    owner: root
    group: '{{ nginx__service_group }}'
    mode: 0640
    validate: '{{ nginx__configuration_validator }}'
  notify: ['reload-nginx']
